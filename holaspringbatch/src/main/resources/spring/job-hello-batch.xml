<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.2.xsd
	">

	<context:component-scan base-package="net.rodor.holaspringbatch" />

	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>


	<!-- encargados de tareas -->
	<bean id="taskletA" class="net.rodor.holaspringbatch.tasklet.TaskletA" />

	<bean id="taskletB" class="net.rodor.holaspringbatch.tasklet.TaskletB" />
	<bean id="deciderB" class="net.rodor.holaspringbatch.decider.TaskletBDecider" />
	<bean id="promotionListener"
		class="org.springframework.batch.core.listener.ExecutionContextPromotionListener">
		<property name="keys" value="whereToGo" />
	</bean>


	<bean id="taskletC" class="net.rodor.holaspringbatch.tasklet.TaskletC" />

	<bean id="taskletD" class="net.rodor.holaspringbatch.tasklet.TaskletD" />

	<batch:job id="helloWorldJob">

		<!-- lectura de ficheros, validacion, transformacion y almacenamiento -->

		<!-- movemos los ficheros de la carpeta de input hacia carpeta procesando -->
		<batch:step id="step-A">

			<batch:tasklet ref="taskletA" />

			<!-- Si hay un error paramos el Job. Si al ejecutar la tarea encontramos 
				algo que deba parar el Job salimos por STOP. Si todo va bien lanzamos step 
				B -->
			<batch:end on="FAILED" />
			<batch:end on="STOPPED" />
			<batch:next on="COMPLETED" to="step-B" />

		</batch:step>

		<batch:step id="step-B" next="decisionB">

			<batch:tasklet ref="taskletB" />
			<batch:listeners>
				<batch:listener ref="promotionListener" />
			</batch:listeners>
		</batch:step>

		<batch:decision id="decisionB" decider="deciderB">
			<batch:next on="GO_C" to="step-C" />
			<batch:next on="GO_D" to="step-D" />
		</batch:decision>

		<batch:step id="step-C">

			<batch:tasklet ref="taskletC" />

		</batch:step>

		<batch:step id="step-D">

			<batch:tasklet ref="taskletD" />

		</batch:step>


	</batch:job>


	<!-- scheduler -->
	<bean id="runScheduler" class="net.rodor.holaspringbatch.scheduler.HelloBatchScheduler" />

	<!-- Run every 10 seconds -->
	<task:scheduled-tasks>
		<task:scheduled ref="runScheduler" method="run"
			cron="*/2 * * * * *" />
	</task:scheduled-tasks>

</beans>